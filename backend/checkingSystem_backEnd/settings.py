"""
Django settings for checkingSystem_backEnd project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
load_dotenv(dotenv_path)
# load_dotenv()

# Get the host from the environment variable
# NGROK_HOST = os.getenv('NGROK_HOST')
# print(f"NGROK_HOST: {NGROK_HOST}")
# print(f'NGROK_HOST from .env: {NGROK_HOST}')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

EXTERNAL_FILES_PATH = '/mnt/media'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*fvi51hpglm*u)kv1&r%c3*bofsr*&x3iw+!0v)ap)a+9ygc&#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Set these variables to actual values
# DOMAIN_NAME = os.getenv('DOMAIN_NAME', 'localhost')
DOMAIN_NAME = 'localhost'

# ALLOWED_HOSTS = ['localhost', '127.0.0.1', '100.65.172.77', '112.204.161.244']  # when changing WAN or PUBLIC IP, change this setting
# ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', NGROK_HOST]
ALLOWED_HOSTS = ['localhost', '127.0.0.1', DOMAIN_NAME, '192.168.0.17']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 'api_development',
    'api_development.apps.ApiDevelopmentConfig',
    'rest_framework',
    # 'rest_framework_api_key',
    'corsheaders',
    'django_celery_results',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'django_celery_beat',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'api_development.middleware.CacheControlMiddleware',
]

ROOT_URLCONF = 'checkingSystem_backEnd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.csrf',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'checkingSystem_backEnd.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('SQL_DATABASE'),
        'USER': os.getenv('SQL_USER'),
        'PASSWORD': os.getenv('SQL_PASSWORD'),
        'HOST': 'db',  # This should match the name of the service in docker-compose.yml
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/django-static/'
# STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# This is the URL that will serve the media files.
# MEDIA_URL = 'https://5569-2404-3c00-353f-1f60-582a-40a7-cf29-8ef7.ngrok-free.app/media/'
# MEDIA_URL = f'https://{DOMAIN_NAME}/media/'
MEDIA_URL = '/media/'
# This is the directory where all your uploaded files will be stored.
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_ROOT = 'mnt/media'



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Adjust the port based on your front-end server
    f'https://{DOMAIN_NAME}',
    "http://192.168.0.17",
    # '*'
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]
CORS_ALLOW_HEADERS = ["authorization", "content-type", "x-csrftoken"]


SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    f"https://{DOMAIN_NAME}",
    "http://0.0.0.0:8000",
    "http://192.168.0.17",
]

# SECURE_SSL_REDIRECT = True
CSRF_COOKIE_SECURE = True  # enable when going to production
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False
SECURE_BROWSER_XSS_FILTER = True
X_CONTENT_TYPE_OPTIONS = 'nosniff'


# Celery Configuration
CELERY_BROKER_URL = 'amqp://guest:guest@localhost'
CELERY_RESULT_BACKEND = 'django-db'

#  API Authentication Configuration 
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Access tokens expire in 30 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=6),  # Refresh tokens expire in 1 day
    'ROTATE_REFRESH_TOKENS': True,  # Issue a new refresh token with each refresh request
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old tokens after rotation
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/debug.log',  # Adjust the path as necessary
            'formatter': 'detailed',
        },
    },
    'formatters': {
        'detailed': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}